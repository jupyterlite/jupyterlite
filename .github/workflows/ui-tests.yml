name: UI Tests

on: [push, pull_request]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build dist
        uses: ./.github/actions/build-dist

      - name: Install JupyterLite
        run: |
          python3 -m pip install importlib_metadata 'doit >=0.34,<1' jupyter_core jupyterlab~=3.2
          python3 -m pip install --find-links dist --no-index jupyterlite_core

      - name: Build JupyterLite
        run: |
          cd ui-tests
          # Build the JupyterLite website
          yarn build

      - name: Upload the JupyterLite website
        uses: actions/upload-artifact@v3
        with:
          name: jupyterlite-ui-tests-app-${{ github.run_number }}
          path: ./ui-tests/ui-tests-app

  ui-tests:
    needs: [build]
    name: Visual Regression
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [firefox, chromium]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: jupyterlite-ui-tests-app-${{ github.run_number }}
          path: ./ui-tests/ui-tests-app

      - name: Cache (ui-tests/node_modules)
        uses: actions/cache@v3
        id: cache-ui-tests-node-modules
        with:
          path: ui-tests/node_modules/
          key: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-node-modules-${{ hashFiles('ui-tests/yarn.lock') }}

      - name: Install dependencies and browser
        run: |
          cd ui-tests
          yarn --frozen-lockfile
          yarn playwright install

      - name: Test
        run: |
          cd ui-tests
          yarn run test --browser ${{ matrix.browser }}

      - name: Upload Playwright Test assets
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: jupyterlite-${{ matrix.browser }}-test-assets
          path: |
            ui-tests/test-results

      - name: Upload Playwright Test report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: jupyterlite-${{ matrix.browser }}-test-report
          path: |
            ui-tests/playwright-report

      - name: Update snapshots
        if: failure()
        run: |
          cd ui-tests
          # remove previous snapshots from other browser
          yarn run clean:snapshots
          # generate new snapshots
          yarn run test:update --browser ${{ matrix.browser }}

      - name: Upload updated snapshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: jupyterlite-${{ matrix.browser }}-updated-snapshots
          path: ui-tests/test
